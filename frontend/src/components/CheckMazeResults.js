import React, { useState } from "react";
import { Trans, useTranslation } from "react-i18next";
import { Alert, Col, Row, Button } from "react-bootstrap";

const ResultType = {
  COMPUTATIONS: 0,
  PATH: 1
};

const CenteredInfoText = ({ t }) => <div style={{textAlign: "center"}}>
  {t("maze-check-expected-result")}<br /><i>{t("maze-check-operation")}</i><br />{t("maze-check-your-result")}
</div>;

export default function CheckMazeUpload({ data }) {
  const { t } = useTranslation();

  const [resultType, setResultType] = useState(ResultType.COMPUTATIONS);

  return (
    <>
      <Alert variant="info">
        {data.info.userType === "ADMIN" ?
          <Trans i18nKey="maze-check-info-admin">You can see the correct and your solutions below. This maze was generated by a not-logged-in user, but you can refer to your solution by these values: <ul><li>Solution ID: <b>{{solutionId: data.info.solutionId}}</b></li><li>Maze ID: <b>{{mazeId: data.info.mazeId}}</b></li><li>Nickname: <b>{{nickname: data.info.nickname}}</b></li></ul>Please note these values, because you will not be able to see them again.</Trans>
        : (data.info.userType === "ME" ?
            <Trans i18nKey="maze-check-info-me">You can see the correct and your solutions below. You can see these on your profile page as well since you generated this maze. However, you can refer to your solution by these values: <ul><li>Solution ID: <b>{{solutionId: data.info.solutionId}}</b></li><li>Maze ID: <b>{{mazeId: data.info.mazeId}}</b></li><li>Nickname: <b>{{nickname: data.info.nickname}}</b></li></ul></Trans>
          :
            <Trans i18nKey="maze-check-info-not-admin">You can see the correct and your solutions below. The user who generated this maze can see your solutions. You can refer to your solution by these values: <ul><li>Solution ID: <b>{{solutionId: data.info.solutionId}}</b></li><li>Maze ID: <b>{{mazeId: data.info.mazeId}}</b></li><li>Nickname: <b>{{nickname: data.info.nickname}}</b></li></ul>Please note these values, because you will not be able to see them again.</Trans>
          )
      }
      </Alert>

      <Alert variant="primary">
        {t("maze-check-summary")}
        <ul>
          <li>{t("maze-check-correct")}: <b>{data.info.correct}</b></li>
          <li>{t("maze-check-wrong")}: <b>{data.info.incorrect}</b></li>
          <br />
          <li>{t("maze-check-correct-path")}: <b>{data.info.correctPath}</b></li>
          <li>{t("maze-check-missed-path")}: <b>{data.info.missedPath}</b></li>
          <li>{t("maze-check-wrong-path")}: <b>{data.info.wrongPath}</b></li>
        </ul>
      </Alert>

      <p>{t("maze-check-legend")}</p>

      <Row className="justify-content-md-center mb-3">
        {resultType === ResultType.COMPUTATIONS ? 
          <>
            <Col xs={12} md={3}>
              <div className="yellow"><CenteredInfoText t={t}/></div>
              <div>{t("maze-check-correct-correct-path")}</div>
            </Col>
            <Col xs={12} md={3}>
              <div className="correct"><CenteredInfoText t={t}/></div>
              <div>{t("maze-check-correct")}</div>
            </Col>
            <Col xs={12} md={3}>
              <div className="wrong"><CenteredInfoText t={t}/></div>
              <div>{t("maze-check-wrong")}</div>
            </Col>
          </>
        :
          <>
            <Col>
              <div className="yellow"><CenteredInfoText t={t}/></div>
              <div>{t("maze-check-correct-correct-path")}</div>
            </Col>
            <Col>
              <div className="correct-path"><CenteredInfoText t={t}/></div>
              <div>{t("maze-check-correct-path")}</div>
            </Col>
            <Col>
              <div className="wrong-path"><CenteredInfoText t={t}/></div>
              <div>{t("maze-check-wrong-path")}</div>
            </Col>
            <Col>
              <div className="missed-path"><CenteredInfoText t={t}/></div>
              <div>{t("maze-check-missed-path")}</div>
            </Col>
          </>
        }
      </Row>

      <center className="mb-3">
        <Button 
          onClick={() => setResultType(ResultType.COMPUTATIONS)} 
          disabled={resultType === ResultType.COMPUTATIONS}
          className="me-2"
        >
          {t("maze-check-result-type-computations")}
        </Button>
        <Button 
          onClick={() => setResultType(ResultType.PATH)} 
          disabled={resultType === ResultType.PATH}
        >
          {t("maze-check-result-type-path")}
        </Button>
      </center>

      <div className="maze" style={{gridTemplateColumns: `repeat(${data.width}, 1fr)`, minWidth: `${75 * data.width}px`}}>
        {Array.from({length: data.height}).map((_, i) => (
          Array.from({length: data.width}).map((__, j) => {
            const isStart = data.start[0] === j && data.start[1] === i;
            const isEnd = data.end[0] === j && data.end[1] === i;
            const cell = data.data[i][j];

            //Build the style...
            let cellStyle = "maze-cell";

            //If the cell is the start or the end
            if (Object.keys(cell).length === 0) {
              cellStyle += " yellow";
            }
            //If the cell was not solved
            else if (Object.keys(cell).length === 2) {
              //If the cell is part of the path and we are displaying the path
              if (cell.isUserPath && cell.isMazePath && resultType === ResultType.PATH) {
                cellStyle += " correct-path";
              } else if (cell.isMazePath && resultType === ResultType.PATH) {
                cellStyle += " missed-path";
              } else if (cell.isUserPath && resultType === ResultType.PATH) {
                cellStyle += " wrong-path";
              }
            }
            //If the cell was solved
            else {
              const isCorrect = cell.result === cell.expectedResult;
              const isCorrectPath = cell.isUserPath && cell.isMazePath;

              //Is it correct and part of the path?
              if (isCorrect && isCorrectPath) {
                cellStyle += " yellow";
              }
              //Or...
              else {
                //If we are displaying the computations
                if (resultType === ResultType.COMPUTATIONS) {
                  if (isCorrect) {
                    cellStyle += " correct";
                  } else {
                    cellStyle += " wrong";
                  }
                }
                //If we are displaying the path
                else {
                  const isWrongPath = cell.isUserPath && !cell.isMazePath;
                  const isMissedPath = !cell.isUserPath && cell.isMazePath;

                  //If the cell is part of the path and the user's path
                  if (isCorrectPath) {
                    cellStyle += " correct-path";
                  }
                  //If the cell is NOT part of the path but IS part of the user's path
                  else if (isWrongPath) {
                    cellStyle += " wrong-path";
                  }
                  //If the cell is part of the path but NOT of the user's path
                  else if (isMissedPath) {
                    cellStyle += " missed-path";
                  }
                }
              }
            }

            return (
              <div key={`${i}-${j}`} className={cellStyle}>
                <div className="maze-cell-content" style={{ height: "100%" }} >
                  {isStart ? t("maze-start") 
                    : (isEnd ? t("maze-end") 
                      : (cell.result ? <center>{cell.expectedResult}<br /><i>{cell.operation}</i><br />{cell.result}</center> : "")
                    )
                  }
                </div>
              </div>
            );
          })
        ))}
      </div>
    </>
  );
}
